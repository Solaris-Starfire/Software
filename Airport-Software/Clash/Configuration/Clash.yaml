# mihomo 配置
# 适用版本：所有使用 mihomo 核心的程序
port: 7890
socks-port: 7891
mixed-port: 7892
redir-port: 7893
tproxy-port: 7894

unified-delay: true
geodata-mode: false
geodata-loader: standard
geo-auto-update: true
geo-update-interval: 24
tcp-concurrent: true
find-process-mode: strict
global-client-fingerprint: chrome

allow-lan: true
mode: rule
log-level: info
ipv6: false
udp: true

external-controller: 0.0.0.0:9090
# external-ui: ui
# external-ui-url: 'https://github.com/MetaCubeX/metacubexd/archive/refs/heads/gh-pages.zip'

geox-url:
  # geoip: 'https://raw.githubusercontent.com/Loyalsoldier/v2ray-rules-dat/release/geoip.dat'
  # geosite: 'https://raw.githubusercontent.com/Loyalsoldier/v2ray-rules-dat/release/geosite.dat'
  mmdb: "https://gitlab.com/Masaiki/GeoIP2-CN/-/raw/release/Country.mmdb"
  asn: "https://gitlab.com/Loon0x00/loon_data/-/raw/main/geo/GeoLite2-ASN.mmdb"

profile:
  store-selected: true
  store-fake-ip: true

sniffer:
  enable: true
  force-dns-mapping: true
  parse-pure-ip: true
  override-destination: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
    - +.v2ex.com

  skip-domain:
    - Mijia Cloud

tun:
  enable: true
  stack: system
  dns-hijack:
    - any:53
  auto-route: true
  auto-detect-interface: true

dns:
  enable: true
  listen: 0.0.0.0:1053
  ipv6: true
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  fake-ip-filter:
    - "*"
    - +.lan
  default-nameserver:
    - 223.5.5.5
    - 223.6.6.6
  nameserver:
    - https://223.5.5.5/dns-query#h3=true
    - https://223.6.6.6/dns-query#h3=true

# 锚点 - 节点订阅的参数 [每天更新一次订阅节点，每 60 秒一次健康检查]
NodeParam: &NodeParam {type: http, interval: 86400, health-check: {enable: true, url: "http://cp.cloudflare.com", interval: 60 }}

# 锚点 - 节点订阅
proxy-providers:
  机场名称:
    url: "订阅"
    <<: *NodeParam
    path: "./proxy_providers/机场名称.yaml"
    override:
      additional-prefix: "[机场名称] " # 为订阅节点添加机场名称前缀

  机场名称:
    url: "订阅"
    <<: *NodeParam
    path: "./proxy_providers/机场名称.yaml"
    override:
      additional-prefix: "[机场名称] " # 为订阅节点添加机场名称前缀



# 锚点 - 节点筛选组
FilterHK: &FilterHK '^(?=.*((?i)🇭🇰|香港|(\b(HK|Hong)\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterTW: &FilterTW '^(?=.*((?i)🇹🇼|台湾|(\b(TW|Tai|Taiwan)\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterJP: &FilterJP '^(?=.*((?i)🇯🇵|日本|川日|东京|大阪|泉日|埼玉|(\b(JP|Japan)\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterKR: &FilterKR '^(?=.*((?i)🇰🇷|韩国|韓|首尔|(\b(KR|Korea)\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterSG: &FilterSG '^(?=.*((?i)🇸🇬|新加坡|狮|(\b(SG|Singapore)\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterUS: &FilterUS '^(?=.*((?i)🇺🇸|美国|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|(\b(US|United States)\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterUK: &FilterUK '^(?=.*((?i)🇬🇧|英国|伦敦|(\b(UK|United Kingdom)\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterFR: &FilterFR '^(?=.*((?i)🇫🇷|法国|(\b(FR|France)\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterDE: &FilterDE '^(?=.*((?i)🇩🇪|德国|(\b(DE|Germany)\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
#YouTube使用节点
FilterYTB: &FilterYTB '^(?=.*((?i)(\b(HK01|TW01|SG01|JP01|US01)\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
#流媒体使用节点
FilterLMT: &FilterLMT '^(?=.*((?i)🇸🇬|新加坡|狮|🇯🇵|日本|川日|东京|大阪|泉日|埼玉|印度|土耳其|埃及|(\b(JP|Japan|SG|Singapore|TR)\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
#AI使用节点
FilterUSJ: &FilterUSJ '^(?=.*((?i)🇺🇸|美国|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|🇯🇵|日本|川日|东京|大阪|泉日|埼玉|🇸🇬|新加坡|狮|(\b(US|United States|JP|JapanSG|Singapore)\b)))(?!.*((?i)回国|校园)).*$'
#GitHub使用节点
FilterHTSJ: &FilterHTSJ '^(?=.*((?i)🇭🇰|香港|🇹🇼|台湾|🇯🇵|日本|川日|东京|大阪|泉日|埼玉|🇸🇬|新加坡|狮|(\b(HK|Hong|TW|Tai|Taiwan|JP|JapanSG|Singapore)\b)))(?!.*((?i)回国|校园)).*$'
FilterGame: &FilterGame '^(?=.*((?i)游戏|🎮|(\b(GAME)\b)))(?!.*((?i)回国|校园)).*$'
FilterAll: &FilterAll '^(?=.*(.))(?!.*((?i)群|邀请|返利|循环|官网|客服|网站|网址|获取|订阅|流量|到期|机场|下次|版本|官址|备用|过期|已用|联系|邮箱|工单|贩卖|通知|倒卖|防止|国内|地址|频道|无法|说明|使用|提示|特别|访问|支持|教程|关注|更新|作者|加入|(\b(USE|USED|TOTAL|EXPIRE|EMAIL|Panel|Channel|Author)\b|(\d{4}-\d{2}-\d{2}|\d+G)))).*$'

# 策略组参数锚点
# 锚点 - 时延优选参数 [每 6 秒一次惰性健康检查，容差 20ms，时延超过 2 秒判定为失败，失败 3 次则自动触发健康检查]
#UrlTest: &UrlTest {type: url-test, interval: 6, tolerance: 20, lazy: true, url: 'http://cp.cloudflare.com', disable-udp: false, timeout: 2000, max-failed-times: 3, hidden: true, include-all-providers: true}
# 锚点 - 故障转移参数 [每 6 秒一次惰性健康检查，时延超过 2 秒判定为失败，失败 3 次则自动触发健康检查]
#FallBack: &FallBack {type: fallback, interval: 6, lazy: true, url: 'http://cp.cloudflare.com', disable-udp: false, timeout: 2000, max-failed-times: 3, hidden: true, include-all-providers: true}
# 锚点 - 负载均衡参数 [每 6 秒一次惰性健康检查，时延超过 2 秒判定为失败，失败 3 次则自动触发健康检查]
#LoadBalance: &LoadBalance {type: load-balance, interval: 6, lazy: true, url: 'http://cp.cloudflare.com', disable-udp: false, strategy: consistent-hashing, timeout: 2000, max-failed-times: 3, hidden: true, include-all-providers: true}
# 锚点 - 规则参数 [每天更新一次订阅规则，更新规则时使用直连策略]
RuleProviders: &RuleProviders {type: http, behavior: classical, interval: 86400, format: yaml, proxy: DIRECT}

# 策略组
proxy-groups:
  - {name: 节点选择, type: select, include-all-providers: true, filter: *FilterAll}
  - {name: Telegram, type: select, include-all-providers: true, filter: *FilterUS}
  - {name: YouTube, type: select, include-all-providers: true, filter: *FilterYTB}
  - {name: Google, type: select, include-all-providers: true, filter: *FilterUS}
  - {name: AI, type: select, include-all-providers: true, filter: *FilterUSJ}      
  - {name: X, type: select, include-all-providers: true, filter: *FilterJP}
  - {name: BiliBili, type: select, include-all-providers: true, filter: *FilterHK, proxies: [DIRECT]}
  - {name: GitHub, type: select, include-all-providers: true, filter: *FilterHTSJ}
  - {name: 1Password, type: select, include-all-providers: true, filter: *FilterUS}
  - {name: Talkatone, type: select, include-all-providers: true, filter: *FilterUS}
  - {name: TikTok, type: select, include-all-providers: true, filter: *FilterYTB}
  - {name: Microsoft, type: select, proxies: [DIRECT]}
  - {name: Netflix,type: select, include-all-providers: true, filter: *FilterLMT}
  - {name: 兜底策略, type: select, proxies: [节点选择]}

# 订阅规则
rule-providers:
  Lan:
    <<: *RuleProviders
    path: "./rules/Lan.yaml"
    url: "https://gitlab.com/lodepuly/proxy_tool_resources/-/raw/master/rule/Clash/Lan/Lan.yaml"

  Direct:
    <<: *RuleProviders
    path: "./rules/Direct.yaml"
    url: "https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Clash/Rule/Direct.yaml"


  ChinaDownloadCDN:
    <<: *RuleProviders
    path: "./rules/ChinaDownloadCDN.yaml"
    url: "https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Clash/Rule/ChinaDownloadCDN.yaml"

  InternationalDownloadCDN:
    <<: *RuleProviders
    path: "./rules/InternationalDownloadCDN.yaml"
    url: "https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Clash/Rule/InternationalDownloadCDN.yaml"

  Talkatone:
    <<: *RuleProviders
    path: "./rules/Talkatone.yaml"
    url: "https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Clash/Rule/Talkatone.yaml"

  1PasswordUS:
    <<: *RuleProviders
    path: "./rules/1PasswordUS.yaml"
    url: "https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Clash/Rule/1PasswordUS.yaml"

  GitHub:
    <<: *RuleProviders
    path: "./rules/GitHub.yaml"
    url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/GitHub/GitHub.yaml"

  BiliBili:
    <<: *RuleProviders
    path: "./rules/BiliBili.yaml"
    url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/BiliBili/BiliBili.yaml"

  YouTube:
    <<: *RuleProviders
    path: "./rules/YouTube.yaml"
    url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/YouTube/YouTube.yaml"

#自用的一些网站
  Web:
    <<: *RuleProviders
    path: "./rules/web.yaml"
    url: "https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Clash/Rule/AI.yaml"

  AI:
    <<: *RuleProviders
    path: "./rules/AI.yaml"
    url: "https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Clash/Rule/AI.yaml"

  Twitter:
    <<: *RuleProviders
    path: "./rules/Twitter.yaml"
    url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Twitter/Twitter.yaml"

  TikTok:
    <<: *RuleProviders
    path: "./rules/TikTok.yaml"
    url: "https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Clash/Rule/TikTok.yaml"

  Netflix:
    <<: *RuleProviders
    path: "./rules/Netflix.yaml"
    url: "https://gitlab.com/lodepuly/proxy_tool_resources/-/raw/master/rule/Clash/Netflix/Netflix.yaml"

  iCloudChina:
    <<: *RuleProviders
    path: "./rules/iCloudChina.yaml"
    url: "https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Clash/Rule/iCloudChina.yaml"

  Microsoft:
    <<: *RuleProviders
    path: "./rules/Microsoft.yaml"
    url: "https://gitlab.com/lodepuly/proxy_tool_resources/-/raw/master/rule/Clash/Microsoft/Microsoft.yaml"

  Google:
    <<: *RuleProviders
    path: "./rules/Google.yaml"
    url: "https://gitlab.com/lodepuly/proxy_tool_resources/-/raw/master/rule/Clash/Google/Google.yaml"

  Telegram:
    <<: *RuleProviders
    path: "./rules/Telegram.yaml"
    url: "https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Clash/Rule/Telegram.yaml"

  ESET_China:
    <<: *RuleProviders
    path: "./rules/ESET_China.yaml"
    url: "https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Clash/Rule/ESET_China.yaml"

# 规则指向
rules:
  - RULE-SET, BiliBili, BiliBili
  - RULE-SET, Lan, DIRECT
  - RULE-SET, Direct, DIRECT
  - RULE-SET, ChinaDownloadCDN, DIRECT
  - RULE-SET, InternationalDownloadCDN, 兜底策略
  - RULE-SET, Talkatone, Talkatone
  - RULE-SET, 1PasswordUS, 1Password
  - RULE-SET, GitHub, GitHub
  - RULE-SET, YouTube, YouTube
  - RULE-SET, Telegram, Telegram
  - RULE-SET, Twitter, X
  - RULE-SET, AI, AI
  - RULE-SET, TikTok, TikTok
  - RULE-SET, Netflix, Netflix
  - RULE-SET, iCloudChina, DIRECT
  - RULE-SET, Microsoft, Microsoft
  - RULE-SET, Google, Google
  - RULE-SET, ESET_China, DIRECT
  - GEOIP, CN, DIRECT
  - MATCH, 兜底策略
